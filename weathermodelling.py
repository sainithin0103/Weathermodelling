# -*- coding: utf-8 -*-
"""weathermodelling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gbyzXfXWyh-AASzNL665UjkNuuF_szvp
"""

pip install matplotlib

import numpy as np
import matplotlib.pyplot as plt

# Stage 1: Hard-coding Variables

# Constants
TIME_STEPS = 10
DELTA_T = 1  # Time step in hours
COEFFICIENTS = [0.1, -0.5, 10]  # Quadratic coefficients (ax^2 + bx + c)

# Function to update temperature using a quadratic equation
def update_temperature_quadratic(time, coefficients):
    a, b, c = coefficients
    return a * time**2 + b * time + c

# Main simulation loop
temperatures_hard_coded = [update_temperature_quadratic(t * DELTA_T, COEFFICIENTS) for t in range(TIME_STEPS)]

# Plotting the temperature evolution
time_points = np.arange(0, TIME_STEPS * DELTA_T, DELTA_T)
plt.plot(time_points, temperatures_hard_coded, label='Temperature (Hard-coded)')
plt.title('Temperature Evolution Over Time (Quadratic Solution)')
plt.xlabel('Time (hours)')
plt.ylabel('Temperature')
plt.legend()
plt.show()

# Stage 2: Keyboard Input

# Get quadratic coefficients from user input
a = float(input("Enter coefficient a: "))
b = float(input("Enter coefficient b: "))
c = float(input("Enter coefficient c: "))
user_coefficients = [a, b, c]

# Main simulation loop using user input
temperatures_keyboard_input = [update_temperature_quadratic(t * DELTA_T, user_coefficients) for t in range(TIME_STEPS)]

# Plotting the temperature evolution
plt.plot(time_points, temperatures_keyboard_input, label='Temperature (Keyboard Input)')
plt.title('Temperature Evolution Over Time (Quadratic Solution)')
plt.xlabel('Time (hours)')
plt.ylabel('Temperature')
plt.legend()
plt.show()

# Stage 3: Read from a File

# Read quadratic coefficients from a file
with open('coefficients.txt', 'r') as file:
    file_coefficients = [float(coeff) for coeff in file.readline().split(',')]

# Main simulation loop using coefficients from the file
temperatures_file_input = [update_temperature_quadratic(t * DELTA_T, file_coefficients) for t in range(TIME_STEPS)]

# Plotting the temperature evolution
plt.plot(time_points, temperatures_file_input, label='Temperature (File Input)')
plt.title('Temperature Evolution Over Time (Quadratic Solution)')
plt.xlabel('Time (hours)')
plt.ylabel('Temperature')
plt.legend()
plt.show()